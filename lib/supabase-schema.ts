/*
This file serves as a reference for the Supabase schema.
You'll need to set this up in your Supabase dashboard.

Table: users
- id (uuid, primary key, generated by Supabase auth)
- email (text, unique)
- role (text, enum: 'student', 'faculty', 'hod')
- name (text)
- roll_number (text, nullable) - for students
- department (text, nullable) - for faculty/HOD
- created_at (timestamp with time zone, default: now())

Table: permission_requests
- id (uuid, primary key)
- student_id (uuid, references users.id)
- event_name (text)
- event_date (date)
- event_location (text)
- reason (text)
- description (text)
- proof_url (text) - URL to uploaded proof document
- letter_url (text) - URL to uploaded letter
- status (text, enum: 'pending', 'approved', 'rejected', default: 'pending')
- created_at (timestamp with time zone, default: now())
- department_id (text) - department code
- response_message (text, nullable)
- responded_at (timestamp with time zone, nullable)
- responded_by (uuid, references users.id, nullable)

Storage Buckets:
- Create a 'documents' bucket for storing proof documents and letters
- Set up appropriate permissions
*/

// SQL for setting up Supabase RLS policies (to be run in SQL editor)
const usersPolicies = `
-- Allow users to read their own data
CREATE POLICY "Users can view own data" ON public.users
    FOR SELECT
    USING (auth.uid() = id);

-- Allow users to update their own data
CREATE POLICY "Users can update own data" ON public.users
    FOR UPDATE
    USING (auth.uid() = id);
`;

const permissionRequestsPolicies = `
-- Students can create permission requests
CREATE POLICY "Students can create permission requests" ON public.permission_requests
    FOR INSERT
    WITH CHECK (auth.uid() = student_id);

-- Students can view their own permission requests
CREATE POLICY "Students can view own permission requests" ON public.permission_requests
    FOR SELECT
    USING (auth.uid() = student_id);

-- Faculty/HOD can view permission requests for their department
CREATE POLICY "Faculty can view department permission requests" ON public.permission_requests
    FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM users
            WHERE users.id = auth.uid()
            AND (users.role = 'faculty' OR users.role = 'hod')
            AND users.department = department_id
        )
    );

-- HOD can update permission requests for their department
CREATE POLICY "HOD can update department permission requests" ON public.permission_requests
    FOR UPDATE
    USING (
        EXISTS (
            SELECT 1 FROM users
            WHERE users.id = auth.uid()
            AND users.role = 'hod'
            AND users.department = department_id
        )
    );
`;

const storagePolicy = `
-- Allow students to upload files
CREATE POLICY "Students can upload files" ON storage.objects
    FOR INSERT
    WITH CHECK (auth.uid()::text = (storage.foldername())[1]);

-- Allow students to view their own files
CREATE POLICY "Students can view own files" ON storage.objects
    FOR SELECT
    USING (auth.uid()::text = (storage.foldername())[1]);

-- Allow faculty/HOD to view files
CREATE POLICY "Faculty can view files" ON storage.objects
    FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM users
            WHERE users.id = auth.uid()
            AND (users.role = 'faculty' OR users.role = 'hod')
        )
    );
`;

export const supabaseSchema = {
  usersPolicies,
  permissionRequestsPolicies,
  storagePolicy,
};
